spring.application.name=AsyncPaymentProcessor
#spring.threads.virtual.enabled=${SPRING_THREADS_VIRTUAL_ENABLED:true}

# =======================================================================
# CONFIGURAÇÕES DE APLICAÇÃO - SERVIÇO SEM ENDPOINTS EXTERNOS
# =======================================================================
# Desativa o servidor web - este serviço apenas processa mensagens do Redis
spring.main.web-application-type=none

# =======================================================================
# CONFIGURAÇÕES DE LOGGING - ATIVADAS PARA DEBUGGING
# =======================================================================
#logging.level.root=${LOGGING_LEVEL_ROOT:INFO}
#logging.level.com.maal.asyncpaymentprocessor=${LOGGING_LEVEL_APP:DEBUG}
#logging.level.org.springframework.data.redis=${LOGGING_LEVEL_REDIS:INFO}
#logging.pattern.console=%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n

# =======================================================================
# CONFIGURAÇÕES DO REDIS - PERFORMANCE TUNING AVANÇADO
# =======================================================================
spring.data.redis.host=${REDIS_HOST:localhost}
spring.data.redis.port=${REDIS_PORT:6379}
spring.data.redis.timeout=${REDIS_TIMEOUT:3000ms}
spring.data.redis.database=${REDIS_DATABASE:0}

# =======================================================================
# OTIMIZAÇÕES GERAIS DE PERFORMANCE
# =======================================================================
# Desabilitar recursos desnecessários para máxima performance
spring.jmx.enabled=${SPRING_JMX_ENABLED:false}
spring.main.banner-mode=${SPRING_BANNER_MODE:off}
spring.devtools.restart.enabled=${SPRING_DEVTOOLS_RESTART:false}
spring.devtools.livereload.enabled=${SPRING_DEVTOOLS_LIVERELOAD:false}

# URLs dos Payment Processors - NOVA ABORDAGEM: consulta direta via admin endpoints
app.payment-processor.default.url=${PAYMENT_PROCESSOR_DEFAULT_URL:http://localhost:8001}
app.payment-processor.fallback.url=${PAYMENT_PROCESSOR_FALLBACK_URL:http://localhost:8002}

# =======================================================================
# PROPRIEDADES CUSTOMIZADAS DA APLICAÇÃO - SIMPLIFICADA COM UMA FILA
# =======================================================================
rinha.queue.payments-main=${REDIS_QUEUE_PAYMENTS_MAIN:rinha-payments-main-queue}

# =======================================================================
# CONFIGURAÇÕES DO WORKER - PERFORMANCE TUNING CONFIGURÁVEL
# =======================================================================
# Timeout para operações blocking Redis (ms)
rinha.worker.blocking-timeout=${WORKER_BLOCKING_TIMEOUT:300}

# Máximo de pagamentos processados concorrentemente  
rinha.worker.max-concurrent-payments=${WORKER_MAX_CONCURRENT_PAYMENTS:50}

# Tamanho ideal do lote para leitura em batch
rinha.worker.batch-size=${WORKER_BATCH_SIZE:25}

# Frequência de execução do worker (ms)
rinha.worker.execution-delay=${WORKER_EXECUTION_DELAY:150}
